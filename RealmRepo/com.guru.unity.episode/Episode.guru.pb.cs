// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source : proto/episode/episode.proto
#nullable disable
using Guru.Collection.RealmDB;
using Guru.Collection.Orm;
using Realms;

namespace Guru.Collection.Episode
{
    public enum ContentType
    {
        /// <summary>
        /// 新闻
        /// </summary>
        NEWS = 0,
        /// <summary>
        /// 喜剧
        /// </summary>
        COMEDY = 1,
        /// <summary>
        /// 体育
        /// </summary>
        SPORTS = 2
    }
    public enum FilterType
    {
        /// <summary>
        /// 规则筛选
        /// </summary>
        RULED = 0,
        /// <summary>
        /// 人工
        /// </summary>
        MANUAL = 1
    }
    public class QuestionAnswer : EmbeddedObject
    {
        [MapTo("start_time")]  
        public DateTimeOffset StartTime { get; set; }
        [MapTo("end_time")]  
        public DateTimeOffset EndTime { get; set; }
        [MapTo("question")]  
        public string Question { get; set; }
        [MapTo("answer")]  
        public string Answer { get; set; }
    }
    /// <summary>
    /// episode 存储对象定义
    /// </summary>
    public class Episode : RealmObject 
    {
        /// <summary>
        /// 编号
        /// </summary>
        [MapTo("_id")]
        [PrimaryKey]
        [Indexed(IndexType.General)]  
        public string ID { get; set; }
        /// <summary>
        /// 单集名称
        /// </summary>
        [Required]
        [MapTo("name")]
        [Indexed(IndexType.General)]  
        public string Name { get; set; }
        /// <summary>
        /// 内容类型
        /// </summary>
        [MapTo("content_type")]  
        public int ContentType { get; set; }
        [Ignored]
        public ContentType ContentTypeValue
        {
            get => (ContentType)ContentType;
            set => ContentType = (int)value;
        }
        /// <summary>
        /// 审核方式
        /// </summary>
        [MapTo("filter_type")]  
        public int FilterType { get; set; }
        [Ignored]
        public FilterType FilterTypeValue
        {
            get => (FilterType)FilterType;
            set => FilterType = (int)value;
        }
        /// <summary>
        /// 收听数
        /// </summary>
        [MapTo("count")]  
        public int Count { get; set; }
        /// <summary>
        /// 是否上线
        /// </summary>
        [MapTo("is_online")]  
        public bool IsOnline { get; set; }
        /// <summary>
        /// 内容关键词
        /// </summary>
        [MapTo("keywords")]  
        public IList<string> Keywords { get; }
        /// <summary>
        /// 内容大纲
        /// </summary>
        [MapTo("outlines")]  
        public IDictionary<string, string> Outlines { get; }
        /// <summary>
        /// QA问答
        /// </summary>
        [MapTo("qas")]  
        public IList<QuestionAnswer> QAs { get; }
        /// <summary>
        /// 创建时间
        /// </summary>
        [MapTo("created_at")]  
        public DateTimeOffset CreatedAt { get; set; }
        /// <summary>
        /// 更新时间
        /// </summary>
        [MapTo("updated_at")]  
        public DateTimeOffset UpdatedAt { get; set; }
    }
    public class EpisodeCreateReq : IRealmMarshalable, ICreationRequest, IIdentifyGeneratable
    {  
        public string ID { get; set; }
        [Required]  
        public string Name { get; set; }  
        public ContentType ContentType { get; set; }  
        public FilterType FilterType { get; set; }  
        public int Count { get; set; }  
        public bool IsOnline { get; set; }  
        public IList<string> Keywords { get; set; }  
        public IDictionary<string, string> Outlines { get; set; }  
        public IList<QuestionAnswer> QAs { get; set; }  
        public DateTimeOffset CreatedAt { get; set; }  
        public DateTimeOffset UpdatedAt { get; set; }
        public string GenerateId()
        {
            this.ID ??= Guid.NewGuid().ToString();
            return this.ID;
        }
        public RealmObject ToRealmObject()
        {
            var realmObject = new Episode()
            {
                ID = this.ID,
                Name = this.Name,
                ContentTypeValue = this.ContentType,
                FilterTypeValue = this.FilterType,
                Count = this.Count,
                IsOnline = this.IsOnline,
                CreatedAt = this.CreatedAt,
                UpdatedAt = this.UpdatedAt,
            };
            if (this.Outlines != null)
            {
                foreach (var item in this.Outlines)
                {
                    realmObject.Outlines.Add(item.Key, item.Value);
                }
            }
            if (this.Keywords != null)
            {
                foreach (var item in this.Keywords)
                {
                    realmObject.Keywords.Add(item);
                }
            }
            if (this.QAs != null)
            {
                foreach (var item in this.QAs)
                {
                    realmObject.QAs.Add(item);
                }
            }

            return realmObject;
        }
        public void SetCreatedAt(DateTimeOffset createdAt)
        {
            this.CreatedAt = createdAt;
        }
        public void SetUpdatedAt(DateTimeOffset updatedAt)
        {
            this.UpdatedAt = updatedAt;
        }
    }
    public class EpisodeCreateRes : ICreationResponse
    {  
        public string Message { get; set; }  
        public string InsertedId { get; set; }  
        public long InsertedCount { get; set; }
        public void SetMessage(string message)
        {
            this.Message = message;
        }
        public void SetInsertedId(string id)
        {
            this.InsertedId = id;
        }
        public void SetInsertCount(long count)
        {
            this.InsertedCount = count;
        }
    }
    public class EpisodeUpdateReq : IRealmMarshalable, IIdentifiable, IUpdateRequest, IUpdateable<Episode>
    {  
        public string ID { get; set; }  
        public string Name { get; set; }  
        public ContentType ContentType { get; set; }  
        public FilterType FilterType { get; set; }  
        public int Count { get; set; }  
        public bool IsOnline { get; set; }  
        public IList<string> Keywords { get; set; }  
        public IDictionary<string, string> Outlines { get; set; }  
        public IList<QuestionAnswer> QAs { get; set; }  
        public DateTimeOffset CreatedAt { get; set; }  
        public DateTimeOffset UpdatedAt { get; set; }
        public string GetId()
        {
            return this.ID;
        }
        public RealmObject ToRealmObject()
        {
            var realmObject = new Episode()
            {
                ID = this.ID,
                Name = this.Name,
                ContentTypeValue = this.ContentType,
                FilterTypeValue = this.FilterType,
                Count = this.Count,
                IsOnline = this.IsOnline,
                CreatedAt = this.CreatedAt,
                UpdatedAt = this.UpdatedAt,
            };
            if (this.Outlines != null)
            {
                foreach (var item in this.Outlines)
                {
                    realmObject.Outlines.Add(item.Key, item.Value);
                }
            }
            if (this.Keywords != null)
            {
                foreach (var item in this.Keywords)
                {
                    realmObject.Keywords.Add(item);
                }
            }
            if (this.QAs != null)
            {
                foreach (var item in this.QAs)
                {
                    realmObject.QAs.Add(item);
                }
            }

            return realmObject;
        }
        public void UpdateObject(Episode obj)
        {
            if (this.ID != default && !object.Equals(this.ID, obj.ID))
            {
                obj.ID = this.ID;
            }
            if (this.Name != default && !object.Equals(this.Name, obj.Name))
            {
                obj.Name = this.Name;
            }
            if (this.ContentType != default && !object.Equals(this.ContentType, obj.ContentTypeValue))
            {
                obj.ContentTypeValue = this.ContentType;
            }
            if (this.FilterType != default && !object.Equals(this.FilterType, obj.FilterTypeValue))
            {
                obj.FilterTypeValue = this.FilterType;
            }
            if (this.Count != default && !object.Equals(this.Count, obj.Count))
            {
                obj.Count = this.Count;
            }
            if (this.IsOnline != default && !object.Equals(this.IsOnline, obj.IsOnline))
            {
                obj.IsOnline = this.IsOnline;
            }
            if (this.CreatedAt != default && !object.Equals(this.CreatedAt, obj.CreatedAt))
            {
                obj.CreatedAt = this.CreatedAt;
            }
            if (this.UpdatedAt != default && !object.Equals(this.UpdatedAt, obj.UpdatedAt))
            {
                obj.UpdatedAt = this.UpdatedAt;
            }
            if (this.Outlines != default)
            {
                obj.Outlines.Clear();
                foreach (var item in this.Outlines)
                {
                    obj.Outlines.Add(item.Key, item.Value);
                }
            }
            if (this.Keywords != default)
            {
                obj.Keywords.Clear();
                foreach (var item in this.Keywords)
                {
                    obj.Keywords.Add(item);
                }
            }
            if (this.QAs != default)
            {
                obj.QAs.Clear();
                foreach (var item in this.QAs)
                {
                    obj.QAs.Add(item);
                }
            }
        }
        public void SetCreatedAt(DateTimeOffset createdAt)
        {
            this.CreatedAt = createdAt;
        }
        public void SetUpdatedAt(DateTimeOffset updatedAt)
        {
            this.UpdatedAt = updatedAt;
        }
    }
    public class EpisodeUpdateRes : IUpdateResponse
    {  
        public string Message { get; set; }  
        public long MatchedCount { get; set; }  
        public long ModifiedCount { get; set; }
        public void SetMessage(string message)
        {
            this.Message = message;
        }
        public void SetMatchedCount(long count)
        {
            this.MatchedCount = count;
        }
        public void SetModifiedCount(long count)
        {
            this.ModifiedCount = count;
        }
    }
    public class EpisodeUpsertReq : IRealmMarshalable, IUpsertRequest, IIdentifiable, IIdentifyGeneratable, IUpdateable<Episode>
    {  
        public string ID { get; set; }  
        public string Name { get; set; }  
        public ContentType ContentType { get; set; }  
        public FilterType FilterType { get; set; }  
        public int Count { get; set; }  
        public bool IsOnline { get; set; }  
        public IList<string> Keywords { get; set; }  
        public IDictionary<string, string> Outlines { get; set; }  
        public IList<QuestionAnswer> QAs { get; set; }  
        public DateTimeOffset CreatedAt { get; set; }  
        public DateTimeOffset UpdatedAt { get; set; }
        public string GetId()
        {
            return this.ID;
        }
        public string GenerateId()
        {
            this.ID ??= Guid.NewGuid().ToString();
            return this.ID;
        }
        public RealmObject ToRealmObject()
        {
            var realmObject = new Episode()
            {
                ID = this.ID,
                Name = this.Name,
                ContentTypeValue = this.ContentType,
                FilterTypeValue = this.FilterType,
                Count = this.Count,
                IsOnline = this.IsOnline,
                CreatedAt = this.CreatedAt,
                UpdatedAt = this.UpdatedAt,
            };
            if (this.Outlines != null)
            {
                foreach (var item in this.Outlines)
                {
                    realmObject.Outlines.Add(item.Key, item.Value);
                }
            }
            if (this.Keywords != null)
            {
                foreach (var item in this.Keywords)
                {
                    realmObject.Keywords.Add(item);
                }
            }
            if (this.QAs != null)
            {
                foreach (var item in this.QAs)
                {
                    realmObject.QAs.Add(item);
                }
            }

            return realmObject;
        }
        public void UpdateObject(Episode obj)
        {
            if (this.ID != default && !object.Equals(this.ID, obj.ID))
            {
                obj.ID = this.ID;
            }
            if (this.Name != default && !object.Equals(this.Name, obj.Name))
            {
                obj.Name = this.Name;
            }
            if (this.ContentType != default && !object.Equals(this.ContentType, obj.ContentTypeValue))
            {
                obj.ContentTypeValue = this.ContentType;
            }
            if (this.FilterType != default && !object.Equals(this.FilterType, obj.FilterTypeValue))
            {
                obj.FilterTypeValue = this.FilterType;
            }
            if (this.Count != default && !object.Equals(this.Count, obj.Count))
            {
                obj.Count = this.Count;
            }
            if (this.IsOnline != default && !object.Equals(this.IsOnline, obj.IsOnline))
            {
                obj.IsOnline = this.IsOnline;
            }
            if (this.CreatedAt != default && !object.Equals(this.CreatedAt, obj.CreatedAt))
            {
                obj.CreatedAt = this.CreatedAt;
            }
            if (this.UpdatedAt != default && !object.Equals(this.UpdatedAt, obj.UpdatedAt))
            {
                obj.UpdatedAt = this.UpdatedAt;
            }
            if (this.Outlines != default)
            {
                obj.Outlines.Clear();
                foreach (var item in this.Outlines)
                {
                    obj.Outlines.Add(item.Key, item.Value);
                }
            }
            if (this.Keywords != default)
            {
                obj.Keywords.Clear();
                foreach (var item in this.Keywords)
                {
                    obj.Keywords.Add(item);
                }
            }
            if (this.QAs != default)
            {
                obj.QAs.Clear();
                foreach (var item in this.QAs)
                {
                    obj.QAs.Add(item);
                }
            }
        }
        public DateTimeOffset GetCreatedAt()
        {
            return this.CreatedAt;
        }
        public void SetCreatedAt(DateTimeOffset createdAt)
        {
            this.CreatedAt = createdAt;
        }
        public void SetUpdatedAt(DateTimeOffset updatedAt)
        {
            this.UpdatedAt = updatedAt;
        }
    }
    public class EpisodeUpsertRes : IUpsertResponse
    {  
        public string Message { get; set; }  
        public string UpsertedId { get; set; }  
        public long MatchedCount { get; set; }  
        public long ModifiedCount { get; set; }  
        public long UpsertedCount { get; set; }
        public void SetMessage(string message)
        {
            this.Message = message;
        }
        public void SetMatchedCount(long count)
        {
            this.MatchedCount = count;
        }
        public void SetModifiedCount(long count)
        {
            this.ModifiedCount = count;
        }
        public void SetUpsertedId(string id)
        {
            this.UpsertedId = id;
        }     
        public void SetUpsertedCount(long count)
        {
            this.UpsertedCount = count;
        }
    }
    public class EpisodeCountReq : IExtraFilterable
    {  
        public Condition ID { get; set; }  
        public Condition Name { get; set; }  
        public Condition ContentType { get; set; }  
        public Condition FilterType { get; set; }  
        public Condition Count { get; set; }  
        public Condition IsOnline { get; set; }  
        public Condition Keywords { get; set; }  
        public Condition Outlines { get; set; }  
        public Condition QAs { get; set; }  
        public Condition CreatedAt { get; set; }  
        public Condition UpdatedAt { get; set; }  
        public IList<PropertyFilter> ExtraFilters { get; set; }
        public PropertyFilter[] GetExtraFilters()
        {
            return this.ExtraFilters?.ToArray();
        }
    }
    public class EpisodeCountRes : ICountResponse
    {  
        public long TotalElements { get; set; }
        public void SetTotalElements(long totalElements)
        {
            this.TotalElements = totalElements;
        }
    }
    public class EpisodeGetReq : IIdentifiable, IProjectable
    {  
        public string ID { get; set; }  
        public IList<string> FieldsIncluded { get; set; }
        public string GetId()
        {
            return this.ID;
        }
        public string[] GetFieldsIncluded()
        {
            return this.FieldsIncluded?.ToArray(); 
        }
    }
    public class EpisodeGetRes : IRealmUnmarshalable
    {  
        public string ID { get; set; }  
        public string Name { get; set; }  
        public ContentType ContentType { get; set; }  
        public FilterType FilterType { get; set; }  
        public int Count { get; set; }  
        public bool IsOnline { get; set; }  
        public IList<string> Keywords { get; set; }  
        public IDictionary<string, string> Outlines { get; set; }  
        public IList<QuestionAnswer> QAs { get; set; }  
        public DateTimeOffset CreatedAt { get; set; }  
        public DateTimeOffset UpdatedAt { get; set; }
        public void FromRealmObject(RealmObject realmObject)
        {
            var obj = (Episode)realmObject;
            this.ID = obj.ID;
            this.Name = obj.Name;
            this.ContentType = obj.ContentTypeValue;
            this.FilterType = obj.FilterTypeValue;
            this.Count = obj.Count;
            this.IsOnline = obj.IsOnline;
            this.CreatedAt = obj.CreatedAt;
            this.UpdatedAt = obj.UpdatedAt;
            if (obj.Outlines != null)
            {
                this.Outlines = new Dictionary<string, string>();
                foreach (var item in obj.Outlines)
                {
                    this.Outlines.Add(item.Key, item.Value);
                }
            }
            if (obj.Keywords != null)
            {
                this.Keywords = new List<string>();
                foreach (var item in obj.Keywords)
                {
                    this.Keywords.Add(item);
                }
            }
            if (obj.QAs != null)
            {
                this.QAs = new List<QuestionAnswer>();
                foreach (var item in obj.QAs)
                {
                    this.QAs.Add(item);
                }
            }
        }
    }
    public class EpisodeOneReq : IProjectable, IExtraFilterable, IPageable
    {  
        public Condition ID { get; set; }  
        public Condition Name { get; set; }  
        public Condition ContentType { get; set; }  
        public Condition FilterType { get; set; }  
        public Condition Count { get; set; }  
        public Condition IsOnline { get; set; }  
        public Condition Keywords { get; set; }  
        public Condition Outlines { get; set; }  
        public Condition QAs { get; set; }  
        public Condition CreatedAt { get; set; }  
        public Condition UpdatedAt { get; set; }  
        public IList<PropertyFilter> ExtraFilters { get; set; }  
        public PageRequest PageRequest { get; set; }  
        public IList<string> FieldsIncluded { get; set; }
        public string[] GetFieldsIncluded()
        {
            return this.FieldsIncluded?.ToArray(); 
        }
        public PropertyFilter[] GetExtraFilters()
        {
            return this.ExtraFilters?.ToArray();
        }
        public PageRequest GetPageRequest()
        {
            return this.PageRequest;
        }
    }
    public class EpisodeOneRes : IOneResponse<Episode>
    {  
        public bool Find { get; set; }  
        public Episode Item { get; set; }
        public void SetFind(bool find)
        {
            this.Find = find;
        }
        public void SetItem(Episode item)
        {
            this.Item = item;
        }
    }
    public class EpisodeListReq : IProjectable, IExtraFilterable, IPageable
    {  
        public Condition ID { get; set; }  
        public Condition Name { get; set; }  
        public Condition ContentType { get; set; }  
        public Condition FilterType { get; set; }  
        public Condition Count { get; set; }  
        public Condition IsOnline { get; set; }  
        public Condition Keywords { get; set; }  
        public Condition Outlines { get; set; }  
        public Condition QAs { get; set; }  
        public Condition CreatedAt { get; set; }  
        public Condition UpdatedAt { get; set; }  
        public IList<PropertyFilter> ExtraFilters { get; set; }  
        public PageRequest PageRequest { get; set; }  
        public IList<string> FieldsIncluded { get; set; }
        public string[] GetFieldsIncluded()
        {
            return this.FieldsIncluded?.ToArray(); 
        }
        public PropertyFilter[] GetExtraFilters()
        {
            return this.ExtraFilters?.ToArray();
        }
        public PageRequest GetPageRequest()
        {
            return this.PageRequest;
        }
    }
    public class EpisodeListRes : IListResponse<Episode>
    {  
        public PageInfo PageInfo { get; set; }  
        public IList<Episode> Items { get; set; }
         public void SetPageInfo(PageInfo pageInfo)
         {
             this.PageInfo = pageInfo;
         }
         public  void SetItems(Episode[] items)
         {
             this.Items = items;
         }
    }
    public class EpisodeDeleteReq : IIdentifiable
    {  
        public string ID { get; set; }
        public string GetId()
        {
            return this.ID;
        }
    }
    public class EpisodeDeleteRes : IDeleteResponse
    {  
        public string Message { get; set; }  
        public long DeletedCount { get; set; }
        public void SetMessage(string message)
        {
            this.Message = message;
        }   
        public void SetDeletedCount(long count)
        {
            this.DeletedCount = count;
        }
    }
    public class EpisodeDeleteMultiReq : IExtraFilterable
    {  
        public Condition ID { get; set; }  
        public Condition Name { get; set; }  
        public Condition ContentType { get; set; }  
        public Condition FilterType { get; set; }  
        public Condition Count { get; set; }  
        public Condition IsOnline { get; set; }  
        public Condition Keywords { get; set; }  
        public Condition Outlines { get; set; }  
        public Condition QAs { get; set; }  
        public Condition CreatedAt { get; set; }  
        public Condition UpdatedAt { get; set; }  
        public IList<PropertyFilter> ExtraFilters { get; set; }  
        public PageRequest PageRequest { get; set; }  
        public IList<string> FieldsIncluded { get; set; }
        public PropertyFilter[] GetExtraFilters()
        {
            return this.ExtraFilters?.ToArray();
        }
    }
    public class EpisodeDeleteMultiRes : IDeleteMultiResponse
    {  
        public string Message { get; set; }  
        public long DeletedCount { get; set; }
        public void SetMessage(string message)
        {
            this.Message = message;
        }   
        public void SetDeletedCount(long count)
        {
            this.DeletedCount = count;
        }
    }
    public class EpisodeMeta : ICollectionMeta
    {
        public class EpisodeFiledMeta : ICollectionFieldMeta
        {
            public string FieldName { get; internal set; }
            public bool Required { get; internal set; } 
        } 

        public string CollectionName => "Episode";
        public bool UseIDObfuscating => true;
        public IDictionary<string, ICollectionFieldMeta> FieldMap { get; } = new Dictionary<string, ICollectionFieldMeta>
        {
            { "ID", new EpisodeFiledMeta { FieldName = "_id", Required = false } },
            { "Name", new EpisodeFiledMeta { FieldName = "name", Required = true } },
            { "ContentType", new EpisodeFiledMeta { FieldName = "content_type", Required = true } },
            { "FilterType", new EpisodeFiledMeta { FieldName = "filter_type", Required = true } },
            { "Count", new EpisodeFiledMeta { FieldName = "count", Required = true } },
            { "IsOnline", new EpisodeFiledMeta { FieldName = "is_online", Required = true } },
            { "Keywords", new EpisodeFiledMeta { FieldName = "keywords", Required = false } },
            { "Outlines", new EpisodeFiledMeta { FieldName = "outlines", Required = false } },
            { "QAs", new EpisodeFiledMeta { FieldName = "qas", Required = false } },
            { "CreatedAt", new EpisodeFiledMeta { FieldName = "created_at", Required = false } },
            { "UpdatedAt", new EpisodeFiledMeta { FieldName = "updated_at", Required = false } },
        };
    }
    /// <summary>
    /// episode 服务
    /// </summary>
    public class EpisodeRepo : RealmRepository
    {
        public static EpisodeRepo NewEpisodeRepo(string realmPath)
        {
            return new EpisodeRepo(RealmFactory.GetSingleton().CreateRealm(realmPath), new EpisodeMeta());
        }
        private EpisodeRepo(RealmConfiguration realmConfig, ICollectionMeta meta) : base(realmConfig, meta) { }
        /// <summary>
        /// 创建
        /// </summary>
        public Task<EpisodeCreateRes> Create( EpisodeCreateReq request)
        {
            return this.BeginTransaction<EpisodeCreateRes>(realm => this.CreateLogic.Create<EpisodeCreateReq, EpisodeCreateRes, Episode>(realm, request));
        }
        /// <summary>
        /// 更新
        /// </summary>
        public Task<EpisodeUpdateRes> Update( EpisodeUpdateReq request)
        {
            return this.BeginTransaction<EpisodeUpdateRes>(realm => this.UpdateLogic.Update<EpisodeUpdateReq, EpisodeUpdateRes, Episode>(realm, request));
        }
        /// <summary>
        /// 更新或者插入
        /// </summary>
        public Task<EpisodeUpsertRes> Upsert( EpisodeUpsertReq request)
        {
            return this.BeginTransaction<EpisodeUpsertRes>(realm => this.UpsertLogic.Upsert<EpisodeUpsertReq, EpisodeUpsertRes, Episode>(realm, request));
        }
        /// <summary>
        /// 条件获取数量
        /// </summary>
        public Task<EpisodeCountRes> Count( EpisodeCountReq request)
        {
            return this.BeginTransaction<EpisodeCountRes>(realm => this.CountLogic.Count<EpisodeCountReq, EpisodeCountRes, Episode>(realm, request));
        }
        /// <summary>
        /// 通过ID获取单个
        /// </summary>
        public Task<EpisodeGetRes> Get( EpisodeGetReq request)
        {
            return this.BeginTransaction<EpisodeGetRes>(realm => this.GetLogic.Get<EpisodeGetReq, EpisodeGetRes, Episode>(realm, request));
        }
        /// <summary>
        /// 条件获取单个
        /// </summary>
        public Task<EpisodeOneRes> One( EpisodeOneReq request)
        {
            return this.BeginTransaction<EpisodeOneRes>(realm => this.OneLogic.One<EpisodeOneReq, EpisodeOneRes, Episode>(realm, request));
        }
        /// <summary>
        /// 条件获取列表
        /// </summary>
        public Task<EpisodeListRes> List( EpisodeListReq request)
        {
            return this.BeginTransaction<EpisodeListRes>(realm => this.ListLogic.List<EpisodeListReq, EpisodeListRes, Episode>(realm, request));
        }
        /// <summary>
        /// 删除单个
        /// </summary>
        public Task<EpisodeDeleteRes> Delete( EpisodeDeleteReq request)
        {
            return this.BeginTransaction<EpisodeDeleteRes>(realm => this.DeleteLogic.Delete<EpisodeDeleteReq, EpisodeDeleteRes, Episode>(realm, request));
        }
        /// <summary>
        /// 批量删除
        /// </summary>
        public Task<EpisodeDeleteMultiRes> DeleteMulti( EpisodeDeleteMultiReq request)
        {
            return this.BeginTransaction<EpisodeDeleteMultiRes>(realm => this.DeleteMultiLogic.DeleteMulti<EpisodeDeleteMultiReq, EpisodeDeleteMultiRes, Episode>(realm, request));
        }
    }
}